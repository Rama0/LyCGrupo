package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;
terminal INIT;
terminal LLAVE_OPEN;
terminal LLAVE_CLOSE;
terminal DOS_PUNTOS;
terminal COMA;
terminal INTEGER;
terminal FLOAT;
terminal STRING;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal PYC;
terminal READ;
terminal WRITE;
terminal AND;
terminal OR;
terminal NOT;
terminal GREATER_THAN;
terminal GREATER_AND_EQUAL;
terminal LOWER_THAN;
terminal LOWER_AND_EQUAL;
terminal EQUAL;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal IGUALES;
terminal CORCHETE_OPEN;
terminal CORCHETE_CLOSE;
terminal DO;
terminal CASE;
terminal DEFAULT;
terminal ENDDO;

// Non Terminals
non terminal inicioprograma;
non terminal programa;
non terminal declaracion;
non terminal bloqueprograma;
non terminal listadeclaracion;
non terminal listavar;
non terminal tdato;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal condicion;
non terminal operando;
non terminal oplog;
non terminal lectura;
non terminal escritura;
non terminal seleccion;
non terminal ramaelse;
non terminal iteracion;
non terminal funciguales;
non terminal funccase;
non terminal casos;
non terminal caso;
non terminal listaexpresion;

// Start Symbol Definition
start with inicioprograma;

inicioprograma ::= programa {: System.out.println("Fin de Programa"); :};

programa ::= INIT LLAVE_OPEN declaracion LLAVE_CLOSE bloqueprograma {: System.out.println("programa ::= INIT LLAVE_OPEN declaracion LLAVE_CLOSE bloqueprograma"); :};

declaracion ::= listadeclaracion {: System.out.println("declaracion ::= listaDeclaracion"); :};
declaracion ::= declaracion listadeclaracion {: System.out.println("declaracion ::= declaracion listaDeclaracion"); :};

listadeclaracion ::= listavar DOS_PUNTOS tdato {: System.out.println("listaDeclaracion ::= listaVar DOS_PUNTOS tDato"); :};

listavar ::= listavar COMA IDENTIFIER {: System.out.println("listaVar ::= listaVar COMA IDENTIFIER"); :};
listavar ::= IDENTIFIER {: System.out.println("IDENTIFIER"); :};

tdato ::= INTEGER {: System.out.println("tDato ::= INTEGER"); :};
tdato ::= FLOAT {: System.out.println("tDato ::= FLOAT"); :};
tdato ::= STRING {: System.out.println("tDato ::= STRING"); :};

bloqueprograma ::= sentence {: System.out.println("programa ::= sentence"); :};
bloqueprograma ::= bloqueprograma sentence {: System.out.println("programa ::= programa sentence"); :};

sentence ::= assignment PYC {: System.out.println("sentence ::= assignment PYC"); :};
sentence ::= lectura PYC {: System.out.println("sentence ::= lectura PYC"); :};
sentence ::= escritura PYC {: System.out.println("sentence ::= escritura PYC"); :};
sentence ::= seleccion {: System.out.println("sentence ::= seleccion"); :};
sentence ::= seleccion ramaelse {: System.out.println("sentence ::= seleccion"); :};
sentence ::= iteracion {: System.out.println("sentence ::= iteracion"); :};
sentence ::= funccase {: System.out.println("expression ::= funccase"); :};

assignment ::= IDENTIFIER ASSIG expression {: System.out.println("assignment ::= IDENTIFIER ASSIG expression"); :};
assignment ::= IDENTIFIER ASSIG STRING_CONSTANT {: System.out.println("assignment ::= IDENTIFIER ASSIG STRING_CONSTANT"); :};

expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
expression ::= funciguales {: System.out.println("expression ::= funciguales"); :};


term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};

factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};
factor ::= FLOAT_CONSTANT {: System.out.println("Factor = FloatConstant"); :};

lectura ::= READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("lectura ::= READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET PYC"); :};

escritura ::= WRITE OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("escritura ::= WRITE OPEN_BRACKET IDENTIFIER CLOSE_BRACKET"); :};
escritura ::= WRITE OPEN_BRACKET STRING_CONSTANT CLOSE_BRACKET {: System.out.println("escritura ::= WRITE OPEN_BRACKET STRING_CONSTANT CLOSE_BRACKET"); :};

seleccion ::= IF OPEN_BRACKET condicion CLOSE_BRACKET LLAVE_OPEN bloqueprograma LLAVE_CLOSE {: System.out.println("seleccion ::= IF OPEN_BRACKET condicion CLOSE_BRACKET LLAVE_OPEN bloqueprograma LLAVE_CLOSE"); :};

ramaelse ::= ELSE LLAVE_OPEN bloqueprograma LLAVE_CLOSE {: System.out.println("ramaelse ::= ELSE LLAVE_OPEN bloqueprograma LLAVE_CLOSE"); :};

iteracion ::= WHILE OPEN_BRACKET condicion CLOSE_BRACKET LLAVE_OPEN bloqueprograma LLAVE_CLOSE {: System.out.println("iteracion ::= WHILE OPEN_BRACKET condicion CLOSE_BRACKET LLAVE_OPEN bloqueprograma LLAVE_CLOSE"); :};

condicion ::= operando oplog operando  {: System.out.println("condicion ::= operando oplog operando"); :};
condicion ::= NOT operando oplog operando  {: System.out.println("condicion ::= operando oplog operando"); :};
condicion ::= operando oplog operando AND operando oplog operando {: System.out.println("condicion ::= operando oplog operando AND operando oplog operando"); :};
condicion ::= operando oplog operando OR operando oplog operando {: System.out.println("condicion ::= operando oplog operando OR operando oplog operando"); :};

operando ::= expression {: System.out.println("operando ::= expression"); :};

oplog ::= GREATER_THAN {: System.out.println("oplog ::= GREATER_THAN"); :};
oplog ::= GREATER_AND_EQUAL {: System.out.println("oplog ::= GREATER_AND_EQUAL"); :};
oplog ::= LOWER_THAN {: System.out.println("oplog ::= LOWER_THAN"); :};
oplog ::= LOWER_AND_EQUAL {: System.out.println("oplog ::= LOWER_AND_EQUAL"); :};
oplog ::= EQUAL {: System.out.println("oplog ::= EQUAL"); :};

funciguales ::= IGUALES OPEN_BRACKET expression COMA CORCHETE_OPEN listaexpresion CORCHETE_CLOSE CLOSE_BRACKET {: System.out.println("funciguales ::= IGUALES OPEN_BRACKET expression COMA CORCHETE_OPEN listaexpresion CORCHETE_CLOSE CLOSE_BRACKET"); :};

listaexpresion ::= listaexpresion COMA expression {: System.out.println("listaexpresion ::= listaexpresion COMA expression"); :};
listaexpresion ::= expression {: System.out.println("listaexpresion ::= expression"); :};

funccase ::= DO IDENTIFIER casos DEFAULT bloqueprograma ENDDO {: System.out.println("funccase ::= DO IDENTIFIER casos DEFAULT bloqueprograma ENDDO"); :};
funccase ::= DO IDENTIFIER casos ENDDO {: System.out.println("funccase ::= DO IDENTIFIER casos ENDDO"); :};

casos ::= casos caso{: System.out.println("casos ::= casos caso"); :};
casos ::= caso{: System.out.println("casos ::= caso"); :};

caso  ::= CASE IDENTIFIER oplog INTEGER_CONSTANT bloqueprograma ;
