package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.SymbolTableGenerator;
import lyc.compiler.files.SymbolTable;
import lyc.compiler.files.IntermediateCodeGenerator;
import lyc.compiler.files.AsmCodeGenerator;

class Parser;

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;
terminal INIT;
terminal LLAVE_OPEN;
terminal LLAVE_CLOSE;
terminal DOS_PUNTOS;
terminal COMA;
terminal INTEGER;
terminal FLOAT;
terminal STRING;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal PYC;
terminal READ;
terminal WRITE;
terminal AND;
terminal OR;
terminal NOT;
terminal GREATER_THAN;
terminal GREATER_AND_EQUAL;
terminal LOWER_THAN;
terminal LOWER_AND_EQUAL;
terminal EQUAL;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal IGUALES;
terminal CORCHETE_OPEN;
terminal CORCHETE_CLOSE;
terminal DO;
terminal CASE;
terminal DEFAULT;
terminal ENDDO;

// Non Terminals
non terminal inicioprograma;
non terminal programa;
non terminal declaracion;
non terminal bloqueprograma;
non terminal listadeclaracion;
non terminal listavar;
non terminal tdato;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal condicion;
non terminal operando;
non terminal oplog;
non terminal lectura;
non terminal escritura;
non terminal seleccion;
non terminal ramaelse;
non terminal iteracion;
non terminal funciguales;
non terminal funccase;
non terminal casos;
non terminal caso;
non terminal listaexpresion;
non terminal sel;

// Start Symbol Definition
start with inicioprograma;

inicioprograma ::= programa {: System.out.println("Fin de Programa"); new AsmCodeGenerator().generar_assembler(new IntermediateCodeGenerator().getPolaca()); :};

programa ::= INIT LLAVE_OPEN declaracion LLAVE_CLOSE bloqueprograma {:  System.out.println("programa ::= INIT LLAVE_OPEN declaracion LLAVE_CLOSE bloqueprograma");:};

declaracion ::= listadeclaracion {: System.out.println("declaracion ::= listaDeclaracion");:};
declaracion ::= declaracion listadeclaracion {: System.out.println("declaracion ::= declaracion listaDeclaracion");:};

listadeclaracion ::= listavar DOS_PUNTOS tdato {:   System.out.println("listaDeclaracion ::= listaVar DOS_PUNTOS tDato");:};

listavar ::= listavar COMA IDENTIFIER : id {:   System.out.println("listaVar ::= listaVar COMA IDENTIFIER");
                                                new SymbolTableGenerator().getTs().add(new SymbolTable(id+""));:};
listavar ::= IDENTIFIER : id {: System.out.println("IDENTIFIER");
                                new SymbolTableGenerator().getTs().add(new SymbolTable(id+""));:};

tdato ::= INTEGER : tdato {:    System.out.println("tDato ::= INTEGER"); new SymbolTableGenerator().asignarTipodeDato("Int");:};
tdato ::= FLOAT : tdato {:  System.out.println("tDato ::= FLOAT"); new SymbolTableGenerator().asignarTipodeDato("Float");:};
tdato ::= STRING : tdato {: System.out.println("tDato ::= STRING"); new SymbolTableGenerator().asignarTipodeDato("String");:};

bloqueprograma ::= sentence {:  System.out.println("programa ::= sentence");:};
bloqueprograma ::= bloqueprograma sentence {:   System.out.println("programa ::= programa sentence");:};

sentence ::= assignment PYC {: System.out.println("sentence ::= assignment PYC"); :};
sentence ::= lectura PYC {: System.out.println("sentence ::= lectura PYC"); :};
sentence ::= escritura PYC {: System.out.println("sentence ::= escritura PYC"); :};
sentence ::= seleccion {: System.out.println("sentence ::= seleccion");:};

sentence ::= iteracion {: System.out.println("sentence ::= iteracion"); :};
sentence ::= funccase {: System.out.println("expression ::= funccase"); :};

assignment ::= IDENTIFIER : id ASSIG {:new SymbolTableGenerator().getPilaTipos().push("Int");:} expression {:  System.out.println("assignment ::= IDENTIFIER ASSIG expression");
                                                    new IntermediateCodeGenerator().getPolaca().add(id+"");
                                                    new IntermediateCodeGenerator().getPolaca().add(":=");
                                                    new SymbolTableGenerator().validarIdDeclarado(id+""); new SymbolTableGenerator().validarTipos(new SymbolTableGenerator().getTipo(id+""), new SymbolTableGenerator().getPilaTipos().pop()); :};
assignment ::= IDENTIFIER : id ASSIG STRING_CONSTANT : constant {: System.out.println("assignment ::= IDENTIFIER ASSIG STRING_CONSTANT"); new SymbolTableGenerator().getTs().add(new SymbolTable("_"+constant)); new SymbolTableGenerator().asignarTipodeDato("CTE_String");  new IntermediateCodeGenerator().getPolaca().add("_"+constant);  new IntermediateCodeGenerator().getPolaca().add(id+""); new IntermediateCodeGenerator().getPolaca().add(":="); new SymbolTableGenerator().validarIdDeclarado(id+""); new SymbolTableGenerator().validarTipos(new SymbolTableGenerator().getTipo(id+""),"String"); :};

expression ::= expression PLUS term {: System.out.println("+"); new IntermediateCodeGenerator().getPolaca().add("+"); :};
expression ::= expression SUB term {: System.out.println("-"); new IntermediateCodeGenerator().getPolaca().add("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
expression ::= funciguales {: System.out.println("expression ::= funciguales"); :};


term ::= term MULT factor {: System.out.println("*"); new IntermediateCodeGenerator().getPolaca().add("*"); :};
term ::= term DIV factor {: System.out.println("/"); new IntermediateCodeGenerator().getPolaca().add("/"); new SymbolTableGenerator().getPilaTipos().pop(); new SymbolTableGenerator().getPilaTipos().push("Float"); :};
term ::= factor {: System.out.println("Term = factor"); :};

factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); new IntermediateCodeGenerator().getPolaca().add(id+""); new SymbolTableGenerator().validarIdDeclarado(id+""); new SymbolTableGenerator().recargarTipo(id+"");:};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant );
                                        new SymbolTableGenerator().getTs().add(new SymbolTable("_"+constant)); new SymbolTableGenerator().asignarTipodeDato("CTE_Int");
                                        new IntermediateCodeGenerator().getPolaca().add("_"+constant); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};
factor ::= FLOAT_CONSTANT : constant {: new SymbolTableGenerator().getPilaTipos().pop(); new SymbolTableGenerator().getPilaTipos().push("Float"); System.out.println("Factor = FloatConstant");  new SymbolTableGenerator().getTs().add(new SymbolTable("_"+constant)); new SymbolTableGenerator().asignarTipodeDato("CTE_Float"); new IntermediateCodeGenerator().getPolaca().add("_"+constant); :};

lectura ::= READ OPEN_BRACKET IDENTIFIER : id CLOSE_BRACKET {: System.out.println("lectura ::= READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET PYC"); new IntermediateCodeGenerator().getPolaca().add(id+"");  new IntermediateCodeGenerator().getPolaca().add("READ"); new SymbolTableGenerator().validarIdDeclarado(id+""); :};

escritura ::= WRITE OPEN_BRACKET IDENTIFIER : id CLOSE_BRACKET {:   System.out.println("escritura ::= WRITE OPEN_BRACKET IDENTIFIER CLOSE_BRACKET");
                                                                    new IntermediateCodeGenerator().getPolaca().add(id+"");
                                                                    new IntermediateCodeGenerator().getPolaca().add("WRITE");
                                                                    new SymbolTableGenerator().validarIdDeclarado(id+""); :};
escritura ::= WRITE OPEN_BRACKET STRING_CONSTANT : constant CLOSE_BRACKET {: System.out.println("escritura ::= WRITE OPEN_BRACKET STRING_CONSTANT CLOSE_BRACKET"); new SymbolTableGenerator().getTs().add(new SymbolTable("_"+constant)); new SymbolTableGenerator().asignarTipodeDato("CTE_String"); new IntermediateCodeGenerator().getPolaca().add("_"+constant); new IntermediateCodeGenerator().getPolaca().add("WRITE"); :};

seleccion ::= sel {: int x = new IntermediateCodeGenerator().getPilaFlag().pop();
    new IntermediateCodeGenerator().actualizarCeldasDelIf(x,0);:};

seleccion ::= sel {: new IntermediateCodeGenerator().getPolaca().add("BI"); new IntermediateCodeGenerator().getPilaInt().push(new IntermediateCodeGenerator().getPolaca().size()); new IntermediateCodeGenerator().getPolaca().add("AVANZO");:}
ramaelse {: int x = new IntermediateCodeGenerator().getPilaFlag().pop();
                new IntermediateCodeGenerator().actualizarCeldasDelIf(x,1); :};

sel ::= IF OPEN_BRACKET condicion CLOSE_BRACKET LLAVE_OPEN bloqueprograma LLAVE_CLOSE {: System.out.println("seleccion ::= IF OPEN_BRACKET condicion CLOSE_BRACKET LLAVE_OPEN bloqueprograma LLAVE_CLOSE");  :};

ramaelse ::= ELSE LLAVE_OPEN bloqueprograma LLAVE_CLOSE {: System.out.println("ramaelse ::= ELSE LLAVE_OPEN bloqueprograma LLAVE_CLOSE"); :};

iteracion ::= WHILE {:new IntermediateCodeGenerator().getPilaInt().push(new IntermediateCodeGenerator().getPolaca().size()); new IntermediateCodeGenerator().getPolaca().add("ET"+new IntermediateCodeGenerator().getIndex());:} OPEN_BRACKET condicion CLOSE_BRACKET LLAVE_OPEN bloqueprograma LLAVE_CLOSE
                                 {: System.out.println("iteracion ::= WHILE OPEN_BRACKET condicion CLOSE_BRACKET LLAVE_OPEN bloqueprograma LLAVE_CLOSE");
                                 int x = new IntermediateCodeGenerator().getPilaFlag().pop();
                                    new IntermediateCodeGenerator().actualizarCeldas(x);
                                    :};
condicion ::= operando oplog operando {:   System.out.println("condicion ::= operando oplog operando"); new IntermediateCodeGenerator().getPolaca().add("@exp1"); new IntermediateCodeGenerator().getPolaca().add("@exp2");
                                            new IntermediateCodeGenerator().getPolaca().add("CMP");
                                            String x = new IntermediateCodeGenerator().getPila().pop();
                                            new IntermediateCodeGenerator().getPolaca().add(x);
                                            new IntermediateCodeGenerator().getPilaInt().push(new IntermediateCodeGenerator().getPolaca().size()); new IntermediateCodeGenerator().getPolaca().add("AVANZO");
                                             new IntermediateCodeGenerator().getPilaFlag().push(2); new IntermediateCodeGenerator().cleanIndx();
                                              String op1 = new SymbolTableGenerator().getPilaTipos().pop();
                                              String op2 = new SymbolTableGenerator().getPilaTipos().pop();
                                              new SymbolTableGenerator().compararOperandos(op1,op2);
                                              new SymbolTableGenerator().getTs().add(new SymbolTable("@exp1"));
                                              new SymbolTableGenerator().asignarTipodeDato("Float");
                                              new SymbolTableGenerator().getTs().add(new SymbolTable("@exp2"));
                                              new SymbolTableGenerator().asignarTipodeDato("Float");
                                              :};
condicion ::= NOT operando oplog operando  {:   System.out.println("condicion ::= operando oplog operando"); new IntermediateCodeGenerator().getPolaca().add("@exp1"); new IntermediateCodeGenerator().getPolaca().add("@exp2");
                                                new IntermediateCodeGenerator().getPolaca().add("CMP");
                                                String x = new IntermediateCodeGenerator().getPila().pop();
                                                x = new IntermediateCodeGenerator().opxch(x);
                                                new IntermediateCodeGenerator().getPolaca().add(x);
                                                new IntermediateCodeGenerator().getPilaInt().push(new IntermediateCodeGenerator().getPolaca().size()); new IntermediateCodeGenerator().getPolaca().add("AVANZO");
                                                  new IntermediateCodeGenerator().getPilaFlag().push(2); new IntermediateCodeGenerator().cleanIndx();
                                                    String op1 = new SymbolTableGenerator().getPilaTipos().pop();
                                                    String op2 = new SymbolTableGenerator().getPilaTipos().pop();
                                                    new SymbolTableGenerator().compararOperandos(op1,op2);
                                                    new SymbolTableGenerator().getTs().add(new SymbolTable("@exp1"));
                                                    new SymbolTableGenerator().asignarTipodeDato("Float");
                                                    new SymbolTableGenerator().getTs().add(new SymbolTable("@exp2"));
                                                    new SymbolTableGenerator().asignarTipodeDato("Float");
                                                    :};
condicion ::= operando oplog operando {:  new IntermediateCodeGenerator().getPolaca().add("@exp1"); new IntermediateCodeGenerator().getPolaca().add("@exp2");
new IntermediateCodeGenerator().getPolaca().add("CMP"); String x = new IntermediateCodeGenerator().getPila().pop();
new IntermediateCodeGenerator().getPolaca().add(x);
new IntermediateCodeGenerator().getPilaInt().push(new IntermediateCodeGenerator().getPolaca().size()); new IntermediateCodeGenerator().getPolaca().add("AVANZO");
String op1 = new SymbolTableGenerator().getPilaTipos().pop();
String op2 = new SymbolTableGenerator().getPilaTipos().pop();
new SymbolTableGenerator().compararOperandos(op1,op2);
new SymbolTableGenerator().getTs().add(new SymbolTable("@exp1"));
new SymbolTableGenerator().asignarTipodeDato("Float");
new SymbolTableGenerator().getTs().add(new SymbolTable("@exp2"));
new SymbolTableGenerator().asignarTipodeDato("Float");
:}
AND operando oplog operando {:    System.out.println("condicion ::= operando oplog operando AND operando oplog operando");
new IntermediateCodeGenerator().getPolaca().add("@exp3"); new IntermediateCodeGenerator().getPolaca().add("@exp4");
new IntermediateCodeGenerator().getPolaca().add("CMP");
String x = new IntermediateCodeGenerator().getPila().pop();
new IntermediateCodeGenerator().getPolaca().add(x);
new IntermediateCodeGenerator().getPilaInt().push(new IntermediateCodeGenerator().getPolaca().size()); new IntermediateCodeGenerator().getPolaca().add("AVANZO");
new IntermediateCodeGenerator().getPilaFlag().push(1); new IntermediateCodeGenerator().cleanIndx();
String op1 = new SymbolTableGenerator().getPilaTipos().pop();
String op2 = new SymbolTableGenerator().getPilaTipos().pop();
new SymbolTableGenerator().compararOperandos(op1,op2);
new SymbolTableGenerator().getTs().add(new SymbolTable("@exp3"));
new SymbolTableGenerator().asignarTipodeDato("Float");
new SymbolTableGenerator().getTs().add(new SymbolTable("@exp4"));
new SymbolTableGenerator().asignarTipodeDato("Float");
:};
condicion ::= operando oplog operando {:  new IntermediateCodeGenerator().getPolaca().add("@exp1"); new IntermediateCodeGenerator().getPolaca().add("@exp2");
                                      new IntermediateCodeGenerator().getPolaca().add("CMP"); String x = new IntermediateCodeGenerator().getPila().pop();
                                      new IntermediateCodeGenerator().getPolaca().add(x);
                                      new IntermediateCodeGenerator().getPilaInt().push(new IntermediateCodeGenerator().getPolaca().size());
                                      new IntermediateCodeGenerator().getPolaca().add("AVANZO");
                                      new IntermediateCodeGenerator().getPolaca().add("BI");
                                      new IntermediateCodeGenerator().getPilaInt().push(new IntermediateCodeGenerator().getPolaca().size());
                                      new IntermediateCodeGenerator().getPolaca().add("AVANZO");
                                      String op1 = new SymbolTableGenerator().getPilaTipos().pop();
                                      String op2 = new SymbolTableGenerator().getPilaTipos().pop();
                                      new SymbolTableGenerator().compararOperandos(op1,op2);
                                      new SymbolTableGenerator().getTs().add(new SymbolTable("@exp1"));
                                      new SymbolTableGenerator().asignarTipodeDato("Float");
                                      new SymbolTableGenerator().getTs().add(new SymbolTable("@exp2"));
                                      new SymbolTableGenerator().asignarTipodeDato("Float");
                                      :}
OR operando oplog operando {: System.out.println("condicion ::= operando oplog operando OR operando oplog operando");
                                                                    new IntermediateCodeGenerator().getPolaca().add("@exp3"); new IntermediateCodeGenerator().getPolaca().add("@exp4");
                                                                    new IntermediateCodeGenerator().getPolaca().add("CMP");
                                                                    String x = new IntermediateCodeGenerator().getPila().pop();
                                                                    new IntermediateCodeGenerator().getPolaca().add(x);
                                                                    new IntermediateCodeGenerator().getPilaInt().push(new IntermediateCodeGenerator().getPolaca().size()); new IntermediateCodeGenerator().getPolaca().add("AVANZO");
                                                                    new IntermediateCodeGenerator().getPilaFlag().push(0); new IntermediateCodeGenerator().cleanIndx();
                                                                    String op1 = new SymbolTableGenerator().getPilaTipos().pop();
                                                                    String op2 = new SymbolTableGenerator().getPilaTipos().pop();
                                                                    new SymbolTableGenerator().compararOperandos(op1,op2);
                                                                    new SymbolTableGenerator().getTs().add(new SymbolTable("@exp3"));
                                                                    new SymbolTableGenerator().asignarTipodeDato("Float");
                                                                    new SymbolTableGenerator().getTs().add(new SymbolTable("@exp4"));
                                                                    new SymbolTableGenerator().asignarTipodeDato("Float");
                                                                    :};

operando ::= {: new SymbolTableGenerator().getPilaTipos().push("Int"); :} expression {: System.out.println("operando ::= expression"); new IntermediateCodeGenerator().getPolaca().add("@exp"+  new IntermediateCodeGenerator().getIndx()); new IntermediateCodeGenerator().getPolaca().add(":="); :};

oplog ::= GREATER_THAN {:   System.out.println("oplog ::= GREATER_THAN");
                            new IntermediateCodeGenerator().getPila().push("BLE");:};
oplog ::= GREATER_AND_EQUAL {:  System.out.println("oplog ::= GREATER_AND_EQUAL");
                                new IntermediateCodeGenerator().getPila().push("BLT");:};
oplog ::= LOWER_THAN {: System.out.println("oplog ::= LOWER_THAN");
                        new IntermediateCodeGenerator().getPila().push("BGE");:};
oplog ::= LOWER_AND_EQUAL {:    System.out.println("oplog ::= LOWER_AND_EQUAL");
                                new IntermediateCodeGenerator().getPila().push("BGT");:};
oplog ::= EQUAL {:  System.out.println("oplog ::= EQUAL");
                    new IntermediateCodeGenerator().getPila().push("BNE");:};

funciguales ::= IGUALES OPEN_BRACKET expression {: new IntermediateCodeGenerator().getPolaca().add("@aux1"); new IntermediateCodeGenerator().getPolaca().add(":="); :} COMA CORCHETE_OPEN listaexpresion CORCHETE_CLOSE CLOSE_BRACKET {: System.out.println("funciguales ::= IGUALES OPEN_BRACKET expression COMA CORCHETE_OPEN listaexpresion CORCHETE_CLOSE CLOSE_BRACKET");
new IntermediateCodeGenerator().getPolaca().add("@cant");
new SymbolTableGenerator().getTs().add(new SymbolTable("@cant"));
new SymbolTableGenerator().asignarTipodeDato("Int");
new SymbolTableGenerator().getTs().add(new SymbolTable("@aux1"));
new SymbolTableGenerator().asignarTipodeDato("Float");
new SymbolTableGenerator().getTs().add(new SymbolTable("@aux2"));
new SymbolTableGenerator().asignarTipodeDato("Float");
new SymbolTableGenerator().getPilaTipos().pop();
new SymbolTableGenerator().getPilaTipos().push("Int");
:};

listaexpresion ::= listaexpresion COMA expression {: System.out.println("listaexpresion ::= listaexpresion COMA expression"); new IntermediateCodeGenerator().getPolaca().add("@aux2"); new IntermediateCodeGenerator().getPolaca().add(":="); new IntermediateCodeGenerator().getPolaca().add("@aux1");  new IntermediateCodeGenerator().getPolaca().add("@aux2"); new IntermediateCodeGenerator().getPolaca().add("CMP"); new IntermediateCodeGenerator().getPolaca().add("BNE"); new IntermediateCodeGenerator().getPolaca().add( new IntermediateCodeGenerator().getPolaca().size()+6+""); new IntermediateCodeGenerator().getPolaca().add("@cant"); new IntermediateCodeGenerator().getPolaca().add("1"); new IntermediateCodeGenerator().getPolaca().add("+"); new IntermediateCodeGenerator().getPolaca().add("@cant"); new IntermediateCodeGenerator().getPolaca().add(":="); System.out.println("listaexpresion ::= expression");:};
listaexpresion ::= expression {: new IntermediateCodeGenerator().getPolaca().add("@aux2"); new IntermediateCodeGenerator().getPolaca().add(":="); new IntermediateCodeGenerator().getPolaca().add("@cant"); new IntermediateCodeGenerator().getPolaca().add("0"); new IntermediateCodeGenerator().getPolaca().add(":="); new IntermediateCodeGenerator().getPolaca().add("@aux1");  new IntermediateCodeGenerator().getPolaca().add("@aux2"); new IntermediateCodeGenerator().getPolaca().add("CMP"); new IntermediateCodeGenerator().getPolaca().add("BNE"); new IntermediateCodeGenerator().getPolaca().add(new IntermediateCodeGenerator().getPolaca().size()+6+""); new IntermediateCodeGenerator().getPolaca().add("@cant"); new IntermediateCodeGenerator().getPolaca().add("1"); new IntermediateCodeGenerator().getPolaca().add("+"); new IntermediateCodeGenerator().getPolaca().add("@cant"); new IntermediateCodeGenerator().getPolaca().add(":="); System.out.println("listaexpresion ::= expression"); :};

funccase ::= DO IDENTIFIER casos DEFAULT bloqueprograma ENDDO {: System.out.println("funccase ::= DO IDENTIFIER casos DEFAULT bloqueprograma ENDDO"); :};
funccase ::= DO IDENTIFIER casos ENDDO {: System.out.println("funccase ::= DO IDENTIFIER casos ENDDO"); :};

casos ::= casos caso{: System.out.println("casos ::= casos caso"); :};
casos ::= caso{: System.out.println("casos ::= caso"); :};
caso  ::= CASE IDENTIFIER : id oplog INTEGER_CONSTANT : constant {: new IntermediateCodeGenerator().getPolaca().add(id+"");
                                                                    new IntermediateCodeGenerator().getPolaca().add("_"+constant);
                                                                    new IntermediateCodeGenerator().getPolaca().add("CMP");
                                                                    new IntermediateCodeGenerator().getPolaca().add(new IntermediateCodeGenerator().getPila().pop());
                                                                    new IntermediateCodeGenerator().getPilaInt().push(new IntermediateCodeGenerator().getPolaca().size());
                                                                    new IntermediateCodeGenerator().getPolaca().add("AVANZO");
                                                                    :} bloqueprograma {: System.out.println("caso  ::= CASE IDENTIFIER oplog INTEGER_CONSTANT : constant bloqueprograma");
                                                                                                                                                                                            new SymbolTableGenerator().getTs().add(new SymbolTable("_"+constant)); new SymbolTableGenerator().asignarTipodeDato("CTE_Int"); new SymbolTableGenerator().validarIdDeclarado(id+"");
                                                                                                                                                                                            new IntermediateCodeGenerator().getPolaca().set(new IntermediateCodeGenerator().getPilaInt().pop(), String.valueOf(new IntermediateCodeGenerator().getPolaca().size())); :};